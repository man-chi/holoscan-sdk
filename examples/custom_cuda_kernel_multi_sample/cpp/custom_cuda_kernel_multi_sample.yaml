%YAML 1.2
# SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

replayer:
  directory: "../data/racerx"
  basename: "racerx"
  frame_rate: 0   # as specified in timestamps
  repeat: true    # default: false
  realtime: true  # default: true
  count: 0        # default: 0 (no frame count restriction)

format_converter:
  out_tensor_name: input_formatted
  out_dtype: "rgb888"
  resize_width: 320
  resize_height: 320

format_converter2:
  out_tensor_name: input_formatted2
  out_dtype: "rgb888"
  resize_width: 320
  resize_height: 320

processor:
  process_operations:
    "input_formatted": ["custom_cuda_kernel-1"]
    "input_formatted2": ["custom_cuda_kernel-1:custom_cuda_kernel-2"]
  processed_map:
    "input_formatted": ["input_processed"]
    "input_formatted2": ["input_processed2"]
  custom_kernels:
    cuda_kernel-1: |
                    extern "C" __global__ void customKernel1(const unsigned char* input, unsigned char* output, int size)
                    {
                      int idx = blockIdx.x * blockDim.x + threadIdx.x;
                      int channels = 3;
                      if (idx < size/channels) {
                        int pixel_idx = idx * channels; // Each pixel has 3 channels (RGB)

                        unsigned char r = input[pixel_idx];
                        unsigned char g = input[pixel_idx + 1];
                        unsigned char b = input[pixel_idx + 2];

                        // Compute grayscale using luminance formula
                        unsigned char gray = static_cast<unsigned char>(0.299f * r + 0.587f * g + 0.114f * b);

                        output[idx] = gray;
                      }
                    }
    out_dtype-1: "kUInt8"
    output_dimensions-1: "320,320,1"
    thread_per_block-1: "256"
    cuda_kernel-2: "../examples/custom_cuda_kernel_multi_sample/cpp/edge_detection.cu"
    out_dtype-2: "kUInt8"
    output_dimensions-2: "320,320,1"
    thread_per_block-2: "16, 16"
  in_tensor_names: ["input_formatted", "input_formatted2"]
  out_tensor_names : ["input_processed", "input_processed2"]
  input_on_cuda: true
  output_on_cuda: true
  transmit_on_cuda: true

holoviz:
  window_title: "CUDA Kernel multi test"
  width: 960
  height: 320
