# SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 56454d4..5719716 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -131,6 +131,7 @@ endif()
 
 # ##################################################################################################
 # * install targets --------------------------------------------------------------------------------
+if(OFF) # disable exports in Holoscan SDK build
 
 include(CPack)
 
@@ -167,6 +168,7 @@ rapids_export(
   NAMESPACE rmm::
   DOCUMENTATION doc_string)
 
+endif()
 # ##################################################################################################
 # * make documentation -----------------------------------------------------------------------------
 
diff --git a/cmake/thirdparty/get_cccl.cmake b/cmake/thirdparty/get_cccl.cmake
index ca6a865..936c8f6 100644
--- a/cmake/thirdparty/get_cccl.cmake
+++ b/cmake/thirdparty/get_cccl.cmake
@@ -20,4 +20,13 @@ function(find_and_configure_cccl)
 
 endfunction()
 
-find_and_configure_cccl()
+find_package(CUDAToolkit REQUIRED)
+if(${CUDAToolkit_VERSION_MAJOR} GREATER_EQUAL 13)
+  rapids_find_package(
+    CCCL 3.0 CONFIG REQUIRED PATHS ${CUDAToolkit_LIBRARY_DIR}/cmake/
+    BUILD_EXPORT_SET rmm-exports
+    INSTALL_EXPORT_SET rmm-exports
+  )
+else()
+  find_and_configure_cccl()
+endif()
diff --git a/include/rmm/cuda_stream_view.hpp b/include/rmm/cuda_stream_view.hpp
index a34897d..c896277 100644
--- a/include/rmm/cuda_stream_view.hpp
+++ b/include/rmm/cuda_stream_view.hpp
@@ -18,6 +18,10 @@
 
 #include <rmm/detail/error.hpp>
 
+#ifndef LIBCUDACXX_ENABLE_EXPERIMENTAL_MEMORY_RESOURCE
+#define LIBCUDACXX_ENABLE_EXPERIMENTAL_MEMORY_RESOURCE
+#endif
+
 #include <cuda/stream_ref>
 #include <cuda_runtime_api.h>
 
diff --git a/include/rmm/logger.hpp b/include/rmm/logger.hpp
index 6213221..9524ffa 100644
--- a/include/rmm/logger.hpp
+++ b/include/rmm/logger.hpp
@@ -16,6 +16,10 @@
 
 #pragma once
 
+#ifndef FMT_HEADER_ONLY
+#define FMT_HEADER_ONLY
+#endif
+
 #include <fmt/format.h>
 #include <fmt/ostream.h>
 #include <spdlog/sinks/basic_file_sink.h>
diff --git a/include/rmm/mr/device/cuda_async_memory_resource.hpp b/include/rmm/mr/device/cuda_async_memory_resource.hpp
index ac6b720..cc4b218 100644
--- a/include/rmm/mr/device/cuda_async_memory_resource.hpp
+++ b/include/rmm/mr/device/cuda_async_memory_resource.hpp
@@ -25,7 +25,7 @@
 
 #include <cuda/std/type_traits>
 #include <cuda_runtime_api.h>
-#include <thrust/optional.h>
+// #include <thrust/optional.h>
 
 #include <cstddef>
 #include <limits>
@@ -85,22 +85,22 @@ class cuda_async_memory_resource final : public device_memory_resource {
    * resource should support interprocess communication (IPC). Default is
    * `cudaMemHandleTypeNone` for no IPC support.
    */
-  // NOLINTNEXTLINE(bugprone-easily-swappable-parameters)
-  template <class Optional,
-            cuda::std::enable_if_t<cuda::std::is_same_v<cuda::std::remove_cvref_t<Optional>,
-                                                        thrust::optional<std::size_t>>,
-                                   int> = 0>
-  [[deprecated("Use std::optional instead of thrust::optional.")]]  //
-  explicit cuda_async_memory_resource(
-    Optional initial_pool_size,
-    Optional release_threshold                                  = {},
-    thrust::optional<allocation_handle_type> export_handle_type = {})
-    : cuda_async_memory_resource(initial_pool_size.value_or(std::nullopt),
-                                 release_threshold.value_or(std::nullopt),
-                                 export_handle_type.value_or(std::nullopt))
+  // // NOLINTNEXTLINE(bugprone-easily-swappable-parameters)
+  // template <class Optional,
+  //           cuda::std::enable_if_t<cuda::std::is_same_v<cuda::std::remove_cvref_t<Optional>,
+  //                                                       thrust::optional<std::size_t>>,
+  //                                  int> = 0>
+  // [[deprecated("Use std::optional instead of thrust::optional.")]]  //
+  // explicit cuda_async_memory_resource(
+  //   Optional initial_pool_size,
+  //   Optional release_threshold                                  = {},
+  //   thrust::optional<allocation_handle_type> export_handle_type = {})
+  //   : cuda_async_memory_resource(initial_pool_size.value_or(std::nullopt),
+  //                                release_threshold.value_or(std::nullopt),
+  //                                export_handle_type.value_or(std::nullopt))
 
-  {
-  }
+  // {
+  // }
 
   /**
    * @brief Constructs a cuda_async_memory_resource with the optionally specified initial pool size
diff --git a/include/rmm/mr/device/cuda_async_view_memory_resource.hpp b/include/rmm/mr/device/cuda_async_view_memory_resource.hpp
index c07730f..a495ae9 100644
--- a/include/rmm/mr/device/cuda_async_view_memory_resource.hpp
+++ b/include/rmm/mr/device/cuda_async_view_memory_resource.hpp
@@ -23,7 +23,7 @@
 #include <rmm/mr/device/device_memory_resource.hpp>
 
 #include <cuda_runtime_api.h>
-#include <thrust/optional.h>
+// #include <thrust/optional.h>
 
 #include <cstddef>
 #include <limits>
diff --git a/include/rmm/mr/device/pool_memory_resource.hpp b/include/rmm/mr/device/pool_memory_resource.hpp
index 4cbdeef..9e147f2 100644
--- a/include/rmm/mr/device/pool_memory_resource.hpp
+++ b/include/rmm/mr/device/pool_memory_resource.hpp
@@ -30,7 +30,7 @@
 #include <cuda_runtime_api.h>
 #include <thrust/iterator/counting_iterator.h>
 #include <thrust/iterator/transform_iterator.h>
-#include <thrust/optional.h>
+// #include <thrust/optional.h>
 
 #include <fmt/core.h>
 
@@ -111,146 +111,146 @@ class pool_memory_resource final
   friend class detail::stream_ordered_memory_resource<pool_memory_resource<Upstream>,
                                                       detail::coalescing_free_list>;
 
-  /**
-   * @brief Construct a `pool_memory_resource` and allocate the initial device memory
-   * pool using `upstream_mr`.
-   *
-   * @deprecated Use the constructor that takes an explicit initial pool size instead.
-   *
-   * @throws rmm::logic_error if `upstream_mr == nullptr`
-   * @throws rmm::logic_error if `initial_pool_size` is neither the default nor aligned to a
-   * multiple of pool_memory_resource::allocation_alignment bytes.
-   * @throws rmm::logic_error if `maximum_pool_size` is neither the default nor aligned to a
-   * multiple of pool_memory_resource::allocation_alignment bytes.
-   *
-   * @param upstream_mr The memory_resource from which to allocate blocks for the pool.
-   * @param initial_pool_size Minimum size, in bytes, of the initial pool. Defaults to zero.
-   * @param maximum_pool_size Maximum size, in bytes, that the pool can grow to. Defaults to all
-   * of the available memory from the upstream resource.
-   */
-  template <class Optional,
-            cuda::std::enable_if_t<cuda::std::is_same_v<cuda::std::remove_cvref_t<Optional>,
-                                                        thrust::optional<std::size_t>>,
-                                   int> = 0>
-  [[deprecated(
-    "Must specify initial_pool_size and use std::optional instead of thrust::optional.")]]  //
-  explicit pool_memory_resource(Upstream* upstream_mr,
-                                Optional initial_pool_size,
-                                Optional maximum_pool_size = thrust::nullopt)
-    : pool_memory_resource(
-        upstream_mr, initial_pool_size.value_or(0), maximum_pool_size.value_or(std::nullopt))
-  {
-  }
-
-  /**
-   * @brief Construct a `pool_memory_resource` and allocate the initial device memory
-   * pool using `upstream_mr`.
-   *
-   * @deprecated Use the constructor that takes an explicit initial pool size instead.
-   *
-   * @throws rmm::logic_error if `upstream_mr == nullptr`
-   * @throws rmm::logic_error if `initial_pool_size` is neither the default nor aligned to a
-   * multiple of pool_memory_resource::allocation_alignment bytes.
-   * @throws rmm::logic_error if `maximum_pool_size` is neither the default nor aligned to a
-   * multiple of pool_memory_resource::allocation_alignment bytes.
-   *
-   * @param upstream_mr The memory_resource from which to allocate blocks for the pool.
-   * @param initial_pool_size Minimum size, in bytes, of the initial pool. Defaults to zero.
-   * @param maximum_pool_size Maximum size, in bytes, that the pool can grow to. Defaults to all
-   * of the available memory from the upstream resource.
-   */
-  [[deprecated("Must specify initial_pool_size")]]  //
-  explicit pool_memory_resource(Upstream* upstream_mr,
-                                std::optional<std::size_t> initial_pool_size = std::nullopt,
-                                std::optional<std::size_t> maximum_pool_size = std::nullopt)
-    : pool_memory_resource(upstream_mr, initial_pool_size.value_or(0), maximum_pool_size)
-  {
-  }
-
-  /**
-   * @brief Construct a `pool_memory_resource` and allocate the initial device memory pool using
-   * `upstream_mr`.
-   *
-   * @deprecated Use the constructor that takes an explicit initial pool size instead.
-   *
-   * @throws rmm::logic_error if `upstream_mr == nullptr`
-   * @throws rmm::logic_error if `initial_pool_size` is neither the default nor aligned to a
-   * multiple of pool_memory_resource::allocation_alignment bytes.
-   * @throws rmm::logic_error if `maximum_pool_size` is neither the default nor aligned to a
-   * multiple of pool_memory_resource::allocation_alignment bytes.
-   *
-   * @param upstream_mr The memory_resource from which to allocate blocks for the pool.
-   * @param initial_pool_size Minimum size, in bytes, of the initial pool. Defaults to zero.
-   * @param maximum_pool_size Maximum size, in bytes, that the pool can grow to. Defaults to all
-   * of the available memory from the upstream resource.
-   */
-  template <class Optional,
-            cuda::std::enable_if_t<cuda::std::is_same_v<cuda::std::remove_cvref_t<Optional>,
-                                                        thrust::optional<std::size_t>>,
-                                   int> = 0>
-  [[deprecated(
-    "Must specify initial_pool_size and use std::optional instead of thrust::optional.")]]  //
-  explicit pool_memory_resource(Upstream& upstream_mr,
-                                Optional initial_pool_size,
-                                Optional maximum_pool_size = thrust::nullopt)
-    : pool_memory_resource(
-        upstream_mr, initial_pool_size.value_or(0), maximum_pool_size.value_or(std::nullopt))
-  {
-  }
-
-  /**
-   * @brief Construct a `pool_memory_resource` and allocate the initial device memory pool using
-   * `upstream_mr`.
-   *
-   * @deprecated Use the constructor that takes an explicit initial pool size instead.
-   *
-   * @throws rmm::logic_error if `upstream_mr == nullptr`
-   * @throws rmm::logic_error if `initial_pool_size` is neither the default nor aligned to a
-   * multiple of pool_memory_resource::allocation_alignment bytes.
-   * @throws rmm::logic_error if `maximum_pool_size` is neither the default nor aligned to a
-   * multiple of pool_memory_resource::allocation_alignment bytes.
-   *
-   * @param upstream_mr The memory_resource from which to allocate blocks for the pool.
-   * @param initial_pool_size Minimum size, in bytes, of the initial pool. Defaults to zero.
-   * @param maximum_pool_size Maximum size, in bytes, that the pool can grow to. Defaults to all
-   * of the available memory from the upstream resource.
-   */
-  template <typename Upstream2                                               = Upstream,
-            cuda::std::enable_if_t<cuda::mr::async_resource<Upstream2>, int> = 0>
-  [[deprecated("Must specify initial_pool_size")]]  //
-  explicit pool_memory_resource(Upstream2& upstream_mr,
-                                std::optional<std::size_t> initial_pool_size = std::nullopt,
-                                std::optional<std::size_t> maximum_pool_size = std::nullopt)
-    : pool_memory_resource(upstream_mr, initial_pool_size.value_or(0), maximum_pool_size)
-  {
-  }
-
-  /**
-   * @brief Construct a `pool_memory_resource` and allocate the initial device memory pool using
-   * `upstream_mr`.
-   *
-   * @throws rmm::logic_error if `upstream_mr == nullptr`
-   * @throws rmm::logic_error if `initial_pool_size` is not aligned to a multiple of
-   * pool_memory_resource::allocation_alignment bytes.
-   * @throws rmm::logic_error if `maximum_pool_size` is neither the default nor aligned to a
-   * multiple of pool_memory_resource::allocation_alignment bytes.
-   *
-   * @param upstream_mr The memory_resource from which to allocate blocks for the pool.
-   * @param initial_pool_size Minimum size, in bytes, of the initial pool.
-   * @param maximum_pool_size Maximum size, in bytes, that the pool can grow to. Defaults to all
-   * of the available from the upstream resource.
-   */
-  template <class Optional,
-            cuda::std::enable_if_t<cuda::std::is_same_v<cuda::std::remove_cvref_t<Optional>,
-                                                        thrust::optional<std::size_t>>,
-                                   int> = 0>
-  [[deprecated("Use std::optional instead of thrust::optional.")]]  //
-  explicit pool_memory_resource(Upstream* upstream_mr,
-                                std::size_t initial_pool_size,
-                                Optional maximum_pool_size)
-    : pool_memory_resource(upstream_mr, initial_pool_size, maximum_pool_size.value_or(std::nullopt))
-  {
-  }
+  // /**
+  //  * @brief Construct a `pool_memory_resource` and allocate the initial device memory
+  //  * pool using `upstream_mr`.
+  //  *
+  //  * @deprecated Use the constructor that takes an explicit initial pool size instead.
+  //  *
+  //  * @throws rmm::logic_error if `upstream_mr == nullptr`
+  //  * @throws rmm::logic_error if `initial_pool_size` is neither the default nor aligned to a
+  //  * multiple of pool_memory_resource::allocation_alignment bytes.
+  //  * @throws rmm::logic_error if `maximum_pool_size` is neither the default nor aligned to a
+  //  * multiple of pool_memory_resource::allocation_alignment bytes.
+  //  *
+  //  * @param upstream_mr The memory_resource from which to allocate blocks for the pool.
+  //  * @param initial_pool_size Minimum size, in bytes, of the initial pool. Defaults to zero.
+  //  * @param maximum_pool_size Maximum size, in bytes, that the pool can grow to. Defaults to all
+  //  * of the available memory from the upstream resource.
+  //  */
+  // template <class Optional,
+  //           cuda::std::enable_if_t<cuda::std::is_same_v<cuda::std::remove_cvref_t<Optional>,
+  //                                                       thrust::optional<std::size_t>>,
+  //                                  int> = 0>
+  // [[deprecated(
+  //   "Must specify initial_pool_size and use std::optional instead of thrust::optional.")]]  //
+  // explicit pool_memory_resource(Upstream* upstream_mr,
+  //                               Optional initial_pool_size,
+  //                               Optional maximum_pool_size = thrust::nullopt)
+  //   : pool_memory_resource(
+  //       upstream_mr, initial_pool_size.value_or(0), maximum_pool_size.value_or(std::nullopt))
+  // {
+  // }
+
+  // /**
+  //  * @brief Construct a `pool_memory_resource` and allocate the initial device memory
+  //  * pool using `upstream_mr`.
+  //  *
+  //  * @deprecated Use the constructor that takes an explicit initial pool size instead.
+  //  *
+  //  * @throws rmm::logic_error if `upstream_mr == nullptr`
+  //  * @throws rmm::logic_error if `initial_pool_size` is neither the default nor aligned to a
+  //  * multiple of pool_memory_resource::allocation_alignment bytes.
+  //  * @throws rmm::logic_error if `maximum_pool_size` is neither the default nor aligned to a
+  //  * multiple of pool_memory_resource::allocation_alignment bytes.
+  //  *
+  //  * @param upstream_mr The memory_resource from which to allocate blocks for the pool.
+  //  * @param initial_pool_size Minimum size, in bytes, of the initial pool. Defaults to zero.
+  //  * @param maximum_pool_size Maximum size, in bytes, that the pool can grow to. Defaults to all
+  //  * of the available memory from the upstream resource.
+  //  */
+  // [[deprecated("Must specify initial_pool_size")]]  //
+  // explicit pool_memory_resource(Upstream* upstream_mr,
+  //                               std::optional<std::size_t> initial_pool_size = std::nullopt,
+  //                               std::optional<std::size_t> maximum_pool_size = std::nullopt)
+  //   : pool_memory_resource(upstream_mr, initial_pool_size.value_or(0), maximum_pool_size)
+  // {
+  // }
+
+  // /**
+  //  * @brief Construct a `pool_memory_resource` and allocate the initial device memory pool using
+  //  * `upstream_mr`.
+  //  *
+  //  * @deprecated Use the constructor that takes an explicit initial pool size instead.
+  //  *
+  //  * @throws rmm::logic_error if `upstream_mr == nullptr`
+  //  * @throws rmm::logic_error if `initial_pool_size` is neither the default nor aligned to a
+  //  * multiple of pool_memory_resource::allocation_alignment bytes.
+  //  * @throws rmm::logic_error if `maximum_pool_size` is neither the default nor aligned to a
+  //  * multiple of pool_memory_resource::allocation_alignment bytes.
+  //  *
+  //  * @param upstream_mr The memory_resource from which to allocate blocks for the pool.
+  //  * @param initial_pool_size Minimum size, in bytes, of the initial pool. Defaults to zero.
+  //  * @param maximum_pool_size Maximum size, in bytes, that the pool can grow to. Defaults to all
+  //  * of the available memory from the upstream resource.
+  //  */
+  // template <class Optional,
+  //           cuda::std::enable_if_t<cuda::std::is_same_v<cuda::std::remove_cvref_t<Optional>,
+  //                                                       thrust::optional<std::size_t>>,
+  //                                  int> = 0>
+  // [[deprecated(
+  //   "Must specify initial_pool_size and use std::optional instead of thrust::optional.")]]  //
+  // explicit pool_memory_resource(Upstream& upstream_mr,
+  //                               Optional initial_pool_size,
+  //                               Optional maximum_pool_size = thrust::nullopt)
+  //   : pool_memory_resource(
+  //       upstream_mr, initial_pool_size.value_or(0), maximum_pool_size.value_or(std::nullopt))
+  // {
+  // }
+
+  // /**
+  //  * @brief Construct a `pool_memory_resource` and allocate the initial device memory pool using
+  //  * `upstream_mr`.
+  //  *
+  //  * @deprecated Use the constructor that takes an explicit initial pool size instead.
+  //  *
+  //  * @throws rmm::logic_error if `upstream_mr == nullptr`
+  //  * @throws rmm::logic_error if `initial_pool_size` is neither the default nor aligned to a
+  //  * multiple of pool_memory_resource::allocation_alignment bytes.
+  //  * @throws rmm::logic_error if `maximum_pool_size` is neither the default nor aligned to a
+  //  * multiple of pool_memory_resource::allocation_alignment bytes.
+  //  *
+  //  * @param upstream_mr The memory_resource from which to allocate blocks for the pool.
+  //  * @param initial_pool_size Minimum size, in bytes, of the initial pool. Defaults to zero.
+  //  * @param maximum_pool_size Maximum size, in bytes, that the pool can grow to. Defaults to all
+  //  * of the available memory from the upstream resource.
+  //  */
+  // template <typename Upstream2                                               = Upstream,
+  //           cuda::std::enable_if_t<cuda::mr::async_resource<Upstream2>, int> = 0>
+  // [[deprecated("Must specify initial_pool_size")]]  //
+  // explicit pool_memory_resource(Upstream2& upstream_mr,
+  //                               std::optional<std::size_t> initial_pool_size = std::nullopt,
+  //                               std::optional<std::size_t> maximum_pool_size = std::nullopt)
+  //   : pool_memory_resource(upstream_mr, initial_pool_size.value_or(0), maximum_pool_size)
+  // {
+  // }
+
+  // /**
+  //  * @brief Construct a `pool_memory_resource` and allocate the initial device memory pool using
+  //  * `upstream_mr`.
+  //  *
+  //  * @throws rmm::logic_error if `upstream_mr == nullptr`
+  //  * @throws rmm::logic_error if `initial_pool_size` is not aligned to a multiple of
+  //  * pool_memory_resource::allocation_alignment bytes.
+  //  * @throws rmm::logic_error if `maximum_pool_size` is neither the default nor aligned to a
+  //  * multiple of pool_memory_resource::allocation_alignment bytes.
+  //  *
+  //  * @param upstream_mr The memory_resource from which to allocate blocks for the pool.
+  //  * @param initial_pool_size Minimum size, in bytes, of the initial pool.
+  //  * @param maximum_pool_size Maximum size, in bytes, that the pool can grow to. Defaults to all
+  //  * of the available from the upstream resource.
+  //  */
+  // template <class Optional,
+  //           cuda::std::enable_if_t<cuda::std::is_same_v<cuda::std::remove_cvref_t<Optional>,
+  //                                                       thrust::optional<std::size_t>>,
+  //                                  int> = 0>
+  // [[deprecated("Use std::optional instead of thrust::optional.")]]  //
+  // explicit pool_memory_resource(Upstream* upstream_mr,
+  //                               std::size_t initial_pool_size,
+  //                               Optional maximum_pool_size)
+  //   : pool_memory_resource(upstream_mr, initial_pool_size, maximum_pool_size.value_or(std::nullopt))
+  // {
+  // }
 
   /**
    * @brief Construct a `pool_memory_resource` and allocate the initial device memory pool using
@@ -283,34 +283,34 @@ class pool_memory_resource final
     initialize_pool(initial_pool_size, maximum_pool_size);
   }
 
-  /**
-   * @brief Construct a `pool_memory_resource` and allocate the initial device memory pool using
-   * `upstream_mr`.
-   *
-   * @throws rmm::logic_error if `upstream_mr == nullptr`
-   * @throws rmm::logic_error if `initial_pool_size` is not aligned to a multiple of
-   * pool_memory_resource::allocation_alignment bytes.
-   * @throws rmm::logic_error if `maximum_pool_size` is neither the default nor aligned to a
-   * multiple of pool_memory_resource::allocation_alignment bytes.
-   *
-   * @param upstream_mr The memory_resource from which to allocate blocks for the pool.
-   * @param initial_pool_size Minimum size, in bytes, of the initial pool.
-   * @param maximum_pool_size Maximum size, in bytes, that the pool can grow to. Defaults to all
-   * of the available memory from the upstream resource.
-   */
-  template <class Optional,
-            cuda::std::enable_if_t<cuda::std::is_same_v<cuda::std::remove_cvref_t<Optional>,
-                                                        thrust::optional<std::size_t>>,
-                                   int> = 0>
-  [[deprecated("Use std::optional instead of thrust::optional.")]]  //
-  explicit pool_memory_resource(Upstream& upstream_mr,
-                                std::size_t initial_pool_size,
-                                Optional maximum_pool_size)
-    : pool_memory_resource(cuda::std::addressof(upstream_mr),
-                           initial_pool_size,
-                           maximum_pool_size.value_or(std::nullopt))
-  {
-  }
+  // /**
+  //  * @brief Construct a `pool_memory_resource` and allocate the initial device memory pool using
+  //  * `upstream_mr`.
+  //  *
+  //  * @throws rmm::logic_error if `upstream_mr == nullptr`
+  //  * @throws rmm::logic_error if `initial_pool_size` is not aligned to a multiple of
+  //  * pool_memory_resource::allocation_alignment bytes.
+  //  * @throws rmm::logic_error if `maximum_pool_size` is neither the default nor aligned to a
+  //  * multiple of pool_memory_resource::allocation_alignment bytes.
+  //  *
+  //  * @param upstream_mr The memory_resource from which to allocate blocks for the pool.
+  //  * @param initial_pool_size Minimum size, in bytes, of the initial pool.
+  //  * @param maximum_pool_size Maximum size, in bytes, that the pool can grow to. Defaults to all
+  //  * of the available memory from the upstream resource.
+  //  */
+  // template <class Optional,
+  //           cuda::std::enable_if_t<cuda::std::is_same_v<cuda::std::remove_cvref_t<Optional>,
+  //                                                       thrust::optional<std::size_t>>,
+  //                                  int> = 0>
+  // [[deprecated("Use std::optional instead of thrust::optional.")]]  //
+  // explicit pool_memory_resource(Upstream& upstream_mr,
+  //                               std::size_t initial_pool_size,
+  //                               Optional maximum_pool_size)
+  //   : pool_memory_resource(cuda::std::addressof(upstream_mr),
+  //                          initial_pool_size,
+  //                          maximum_pool_size.value_or(std::nullopt))
+  // {
+  // }
 
   /**
    * @brief Construct a `pool_memory_resource` and allocate the initial device memory pool using
