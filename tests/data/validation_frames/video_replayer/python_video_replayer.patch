--- ../examples/video_replayer/python/video_replayer.py	2023-11-16 01:35:53.593301380 +0000
+++ examples/video_replayer/python/video_replayer_test.py	2023-11-20 03:25:57.853150634 +0000
@@ -21,6 +21,13 @@ from holoscan.core import Application
 from holoscan.data_loggers import AsyncConsoleLogger, SimpleTextSerializer
 from holoscan.operators import HolovizOp, VideoStreamReplayerOp
 from holoscan.resources import RMMAllocator
+from holoscan.operators import (
+    FormatConverterOp,
+    HolovizOp,
+    VideoStreamRecorderOp,
+    VideoStreamReplayerOp,
+)
+from holoscan.resources import RMMAllocator, UnboundedAllocator
 
 sample_data_path = os.environ.get("HOLOSCAN_INPUT_PATH", "../data")
 
@@ -59,6 +66,23 @@ class VideoReplayerApp(Application):
         # Define the workflow
         self.add_flow(replayer, visualizer, {("output", "receivers")})
 
+        recorder_format_converter = FormatConverterOp(
+            self,
+            name="recorder_format_converter",
+            in_dtype="rgba8888",
+            out_dtype="rgb888",
+            pool=UnboundedAllocator(self, name="pool"),
+        )
+
+        recorder = VideoStreamRecorderOp(self, name="recorder", **self.kwargs("recorder"))
+
+        visualizer.add_arg(allocator=UnboundedAllocator(self, name="allocator"))
+
+        self.add_flow(
+            visualizer, recorder_format_converter, {("render_buffer_output", "source_video")}
+        )
+        self.add_flow(recorder_format_converter, recorder)
+
         # Check if the YAML dual_window parameter is set and add a second visualizer in that case
         dual_window = self.kwargs("dual_window").get("dual_window", False)
         if dual_window:
